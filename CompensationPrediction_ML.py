# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kDBC1wmYEAVhywfMva_eGIBbFh-HWyRv
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from scipy.stats import zscore
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Load and Clean Data
def load_data(file_path):
    df = pd.read_csv(file_path)
    df = df.dropna()
    df['Base Salary'] = df['Base Salary'].replace('[\$,]', '', regex=True).astype(float)
    df['Bonus'] = df['Bonus'].replace('[\$,]', '', regex=True).astype(float)
    df['Stock Options'] = df['Stock Options'].replace('[\$,]', '', regex=True).astype(float)
    df['Total Compensation'] = df['Base Salary'] + df['Bonus'] + df['Stock Options']
    return df

# Machine Learning for Compensation Prediction
def ml_compensation_analysis(df):
    features = ['Base Salary', 'Bonus', 'Stock Options', 'Job Title', 'Industry', 'Location']
    target = 'Total Compensation'

    X = df[features]
    y = df[target]

    categorical_features = ['Job Title', 'Industry', 'Location']
    numerical_features = ['Base Salary', 'Bonus', 'Stock Options']

    preprocessor = ColumnTransformer(
        transformers=[
            ('num', StandardScaler(), numerical_features),
            ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
        ]
    )

    models = {
        'Linear Regression': Pipeline([
            ('preprocessor', preprocessor),
            ('model', LinearRegression())
        ]),
        'Random Forest': Pipeline([
            ('preprocessor', preprocessor),
            ('model', RandomForestRegressor(n_estimators=100, random_state=42))
        ]),
        'Gradient Boosting': Pipeline([
            ('preprocessor', preprocessor),
            ('model', GradientBoostingRegressor(n_estimators=100, random_state=42))
        ]),
        'Support Vector Regression': Pipeline([
            ('preprocessor', preprocessor),
            ('model', SVR())
        ])
    }

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    results = {}

    for name, model in models.items():
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        mae = mean_absolute_error(y_test, y_pred)
        mse = mean_squared_error(y_test, y_pred)
        r2 = r2_score(y_test, y_pred)

        results[name] = {'MAE': mae, 'MSE': mse, 'R2 Score': r2}

        print(f"{name} Model Performance:")
        print(f"MAE: {mae:.2f}, MSE: {mse:.2f}, R2 Score: {r2:.2f}\n")

    return results

# Main Execution
def main():
    file_path = 'compensation_data.csv'  # Replace with actual file
    df = load_data(file_path)


    print('\nPerforming ML-Based Compensation Analysis...')
    ml_results = ml_compensation_analysis(df)
    print("ML Model Performance:", ml_results)

if __name__ == '__main__':
    main()