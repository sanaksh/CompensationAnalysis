# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kDBC1wmYEAVhywfMva_eGIBbFh-HWyRv
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from scipy.stats import zscore

# Load and Clean Data
def load_data(file_path):
    df = pd.read_csv(file_path)
    df = df.dropna()
    df['Base Salary'] = df['Base Salary'].replace('[\$,]', '', regex=True).astype(float)
    df['Bonus'] = df['Bonus'].replace('[\$,]', '', regex=True).astype(float)
    df['Stock Options'] = df['Stock Options'].replace('[\$,]', '', regex=True).astype(float)
    df['Total Compensation'] = df['Base Salary'] + df['Bonus'] + df['Stock Options']
    return df

# Compensation Statistics
def compensation_summary(df):
    summary = df.groupby('Job Level')[['Base Salary', 'Bonus', 'Stock Options', 'Total Compensation']].agg(['mean', 'median', 'std'])
    return summary

# Pay Equity Analysis
def pay_equity_analysis(df):
    gender_pay = df.groupby('Gender')['Total Compensation'].mean()
    plt.figure(figsize=(8, 6))
    sns.barplot(x=gender_pay.index, y=gender_pay.values, palette='coolwarm')
    plt.title('Average Total Compensation by Gender')
    plt.xlabel('Gender')
    plt.ylabel('Total Compensation')
    plt.show()

# Salary Distribution
def salary_distribution(df):
    plt.figure(figsize=(10, 6))
    sns.histplot(df['Total Compensation'], bins=30, kde=True, color='blue')
    plt.title('Total Compensation Distribution')
    plt.xlabel('Total Compensation ($)')
    plt.ylabel('Frequency')
    plt.show()

# Compensation Trends over Time
def compensation_trends(df):
    df['Year'] = pd.to_datetime(df['Hire Date']).dt.year
    trend = df.groupby('Year')[['Base Salary', 'Bonus', 'Stock Options', 'Total Compensation']].mean()

    plt.figure(figsize=(10, 6))
    plt.plot(trend.index, trend['Total Compensation'], marker='o', linestyle='-', color='red', label='Total Compensation')
    plt.plot(trend.index, trend['Base Salary'], marker='s', linestyle='-', color='blue', label='Base Salary')
    plt.plot(trend.index, trend['Bonus'], marker='^', linestyle='-', color='green', label='Bonus')
    plt.plot(trend.index, trend['Stock Options'], marker='d', linestyle='-', color='purple', label='Stock Options')
    plt.legend()
    plt.title('Compensation Trends Over Time')
    plt.xlabel('Year')
    plt.ylabel('Compensation ($)')
    plt.show()

# Outlier Detection using Z-score
def detect_outliers(df):
    df['Z-Score'] = zscore(df['Total Compensation'])
    outliers = df[df['Z-Score'].abs() > 3]
    print("Potential Outliers in Compensation:")
    print(outliers[['Employee ID', 'Job Level', 'Total Compensation', 'Z-Score']])

# Interactive Visualization
def interactive_salary_distribution(df):
    fig = px.box(df, x='Job Level', y='Total Compensation', color='Gender', title='Compensation by Job Level & Gender')
    fig.show()

# Netflix-Specific Analysis
def netflix_comp_analysis(df):
    netflix_jobs = df[df['Company'] == 'Netflix']
    plt.figure(figsize=(10, 6))
    sns.boxplot(x='Job Level', y='Total Compensation', data=netflix_jobs, palette='Reds')
    plt.title('Netflix Compensation by Job Level')
    plt.xlabel('Job Level')
    plt.ylabel('Total Compensation')
    plt.show()
    print("Netflix Compensation Summary:")
    print(compensation_summary(netflix_jobs))

# HR Metrics Dashboard
def hr_metrics_dashboard(df):
    hr_metrics = df.groupby('Job Level')[['Base Salary', 'Bonus', 'Stock Options', 'Total Compensation']].mean()
    fig = px.bar(hr_metrics, barmode='group', title='HR Compensation Metrics by Job Level')
    fig.show()

# Main Execution
def main():
    file_path = 'compensation_data.csv'  # Replace with actual file
    df = load_data(file_path)

    print('Compensation Summary:\n', compensation_summary(df))

    print('\nGenerating Pay Equity Analysis...')
    pay_equity_analysis(df)

    print('\nGenerating Salary Distribution...')
    salary_distribution(df)

    print('\nGenerating Compensation Trends...')
    compensation_trends(df)

    print('\nDetecting Outliers...')
    detect_outliers(df)

    print('\nGenerating Interactive Visualization...')
    interactive_salary_distribution(df)

    print('\nAnalyzing Netflix Compensation...')
    netflix_comp_analysis(df)

    print('\nGenerating HR Metrics Dashboard...')
    hr_metrics_dashboard(df)

if __name__ == '__main__':
    main()